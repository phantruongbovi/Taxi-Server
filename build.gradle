buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
        // gradle versions
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
    }
}

plugins {
    id 'java'
    id 'com.google.protobuf' version '0.8.17'
    id 'idea'
    id 'application'
}

//group 'org.example.taxi'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

// #1
repositories {
    mavenCentral()
}

// #2
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    implementation 'io.grpc:grpc-netty-shaded:1.38.0'
    implementation 'io.grpc:grpc-protobuf:1.38.0'
    implementation 'io.grpc:grpc-stub:1.38.0'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

    implementation group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: '2.3.2'
    implementation group: 'redis.clients', name: 'jedis', version: '2.8.0'
    implementation group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: '2.0.40.Final'
    implementation group: 'org.bouncycastle', name: 'bcmail-jdk14', version: '1.69'
    testImplementation group: 'io.grpc', name: 'grpc-testing', version: '1.39.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.11.2'
}

// #3


// #4
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.12.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.38.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}


/*test {
    useJUnitPlatform()
}*/

// #5
sourceSets {
    //src {
        main {
            java {
                srcDirs 'build/generated/source/proto/main/grpc'
                srcDirs 'build/generated/source/proto/main/java'
            }
        }
    //}
}

startScripts.enabled = false

task taxiService(type: CreateStartScripts) {
    mainClassName = 'taxi.server.TaxiServer'
    applicationName = 'taxi-service'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtimeClasspath
}

task taxiClient(type: CreateStartScripts) {
    mainClassName = 'taxi.client.Client'
    applicationName = 'client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtimeClasspath
}


applicationDistribution.into('bin') {
    from(taxiService)
    from(taxiClient)
    fileMode = 0755
}